import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

/**
 * Script para importar Juan completo (cap√≠tulos 1-21)
 *
 * NOTA IMPORTANTE: Este script crea contenido de muestra para el MVP.
 * En producci√≥n, deber√≠as integrar con API.Bible u otra fuente oficial.
 *
 * Para cada cap√≠tulo incluimos:
 * - T√≠tulo descriptivo
 * - Contenido completo en 4 versiones (RV1960, NVI, TLA, NTV)
 * - Vers√≠culos parseados por versi√≥n
 */

// Metadata de cap√≠tulos de Juan con t√≠tulos reales
const juanChapters = [
  { number: 1, title: 'El Verbo hecho carne', verseCount: 51 },
  { number: 2, title: 'Las bodas de Can√°', verseCount: 25 },
  { number: 3, title: 'Nicodemo visita a Jes√∫s', verseCount: 36 },
  { number: 4, title: 'Jes√∫s y la mujer samaritana', verseCount: 54 },
  { number: 5, title: 'El paral√≠tico de Betesda', verseCount: 47 },
  { number: 6, title: 'Alimentaci√≥n de los cinco mil', verseCount: 71 },
  { number: 7, title: 'Jes√∫s en la fiesta de los tabern√°culos', verseCount: 53 },
  { number: 8, title: 'La mujer ad√∫ltera', verseCount: 59 },
  { number: 9, title: 'Jes√∫s sana a un ciego de nacimiento', verseCount: 41 },
  { number: 10, title: 'El buen pastor', verseCount: 42 },
  { number: 11, title: 'La resurrecci√≥n de L√°zaro', verseCount: 57 },
  { number: 12, title: 'Mar√≠a unge a Jes√∫s', verseCount: 50 },
  { number: 13, title: 'Jes√∫s lava los pies de sus disc√≠pulos', verseCount: 38 },
  { number: 14, title: 'Jes√∫s, el camino al Padre', verseCount: 31 },
  { number: 15, title: 'La vid verdadera', verseCount: 27 },
  { number: 16, title: 'La obra del Esp√≠ritu Santo', verseCount: 33 },
  { number: 17, title: 'Jes√∫s ora por sus disc√≠pulos', verseCount: 26 },
  { number: 18, title: 'Arresto y juicio de Jes√∫s', verseCount: 40 },
  { number: 19, title: 'La crucifixi√≥n', verseCount: 42 },
  { number: 20, title: 'La resurrecci√≥n', verseCount: 31 },
  { number: 21, title: 'Jes√∫s se aparece a sus disc√≠pulos', verseCount: 25 },
];

/**
 * Genera contenido de muestra para un cap√≠tulo
 * En producci√≥n, esto vendr√≠a de una API real
 */
function generateChapterContent(chapterNum: number, title: string, verseCount: number) {
  const verses: Record<string, string> = {};

  for (let i = 1; i <= verseCount; i++) {
    verses[i.toString()] = `Contenido del vers√≠culo ${i} de Juan ${chapterNum}: ${title}. Este es contenido de ejemplo para el MVP. En producci√≥n, integrar con API.Bible o base de datos b√≠blica completa.`;
  }

  // Generar contenido completo concatenando todos los vers√≠culos
  const fullContent = Object.values(verses).join(' ');

  return {
    verses,
    fullContent,
  };
}

async function main() {
  console.log('üìñ Importando Juan completo (cap√≠tulos 1-21)...\n');

  // Buscar libro de Juan
  const juan = await prisma.book.findUnique({
    where: { slug: 'juan' },
  });

  if (!juan) {
    throw new Error('Libro de Juan no encontrado');
  }

  let imported = 0;
  let skipped = 0;

  for (const chapter of juanChapters) {
    // Verificar si el cap√≠tulo ya existe
    const existing = await prisma.chapter.findUnique({
      where: {
        bookId_number: {
          bookId: juan.id,
          number: chapter.number,
        },
      },
    });

    if (existing) {
      console.log(`‚è≠Ô∏è  Juan ${chapter.number} ya existe, saltando...`);
      skipped++;
      continue;
    }

    // Generar contenido para las 4 versiones
    const rv1960 = generateChapterContent(chapter.number, chapter.title, chapter.verseCount);
    const nvi = generateChapterContent(chapter.number, chapter.title, chapter.verseCount);
    const tla = generateChapterContent(chapter.number, chapter.title, chapter.verseCount);
    const ntv = generateChapterContent(chapter.number, chapter.title, chapter.verseCount);

    // Crear cap√≠tulo
    await prisma.chapter.create({
      data: {
        bookId: juan.id,
        number: chapter.number,
        title: chapter.title,
        verseCount: chapter.verseCount,

        contentRV1960: rv1960.fullContent,
        versesRV1960: rv1960.verses,

        contentNVI: nvi.fullContent,
        versesNVI: nvi.verses,

        contentTLA: tla.fullContent,
        versesTLA: tla.verses,

        contentNTV: ntv.fullContent,
        versesNTV: ntv.verses,
      },
    });

    console.log(`‚úÖ Juan ${chapter.number} - ${chapter.title} (${chapter.verseCount} vers√≠culos)`);
    imported++;
  }

  console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
  console.log('üìä Resumen de importaci√≥n:');
  console.log(`  ‚úÖ Cap√≠tulos importados: ${imported}`);
  console.log(`  ‚è≠Ô∏è  Cap√≠tulos existentes: ${skipped}`);
  console.log(`  üìñ Total en Juan: ${imported + skipped}/21`);
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

  console.log('üí° Nota: Este contenido es de ejemplo para el MVP.');
  console.log('   Para contenido b√≠blico real, integra con API.Bible o una base de datos completa.\n');
}

main()
  .catch((e) => {
    console.error('‚ùå Error:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
